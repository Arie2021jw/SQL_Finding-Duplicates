Exercise #1: Pivot the department names under its respective (department) group name by turning rows into columns.


Solution #1: We pivot every department names under its respective (department) group name using functions ROW_NUMBER (window), MAX, COALESCE and CASE statements.

Tables used:
[AdventureWorks2022].[HumanResources].[Employee]
[AdventureWorks2022].[HumanResources].[EmployeeDepartmentHistory]
[AdventureWorks2022].[HumanResources].[Department]

	Query #1: We count the number of employees by department and pivot the results for every department
	---------
SELECT PivotingDeptNameGroup.RowNmber							-- PivotingDeptNamesNoNULLsLevel4 / PivotingDeptNamesGroupedLevel3 / PivotingDeptNamesNonGroupedLevel2
, COALESCE(MAX(CASE WHEN PivotingDeptNameGroup.GroupName = 'Executive General and Administration' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END),'') AS 'ExecutiveGeneralandAdmin'
, COALESCE(MAX(CASE WHEN PivotingDeptNameGroup.GroupName = 'Inventory Management' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END),'') AS 'InventoryManagement'
, COALESCE(MAX(CASE WHEN PivotingDeptNameGroup.GroupName = 'Manufacturing' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END),'') AS 'Manufacturing'
, COALESCE(MAX(CASE WHEN PivotingDeptNameGroup.GroupName = 'Quality Assurance' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END),'') AS 'QualityAssurance'
, COALESCE(MAX(CASE WHEN PivotingDeptNameGroup.GroupName = 'Research and Development' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END),'') AS 'ResearchandDevelopment'
, COALESCE(MAX(CASE WHEN PivotingDeptNameGroup.GroupName = 'Sales and Marketing' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END),'') AS 'SalesandMarketing'
FROM (
	SELECT Department.GroupName							-- RowNumberDeptGroupNameLevel1
	, Department.[Name] AS DepartmentName
	, ROW_NUMBER() OVER(PARTITION BY Department.GroupName ORDER BY Department.[Name]) AS RowNmber
	FROM [AdventureWorks2022].[HumanResources].[Employee] AS Employee
	LEFT JOIN [AdventureWorks2022].[HumanResources].[EmployeeDepartmentHistory] AS EmployeeDepartmentHistory
		ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID
	LEFT JOIN [AdventureWorks2022].[HumanResources].[Department] AS Department
		ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID	
	GROUP BY Department.GroupName, Department.[Name]				-- RowNumberDeptGroupNameLevel1
) AS PivotingDeptNameGroup								-- PivotingDeptNamesLevel1
GROUP BY PivotingDeptNameGroup.RowNmber							-- PivotingDeptNamesNoNULLsLevel4 / PivotingDeptNamesGroupedLevel3


	-- OUTPUT
RowNmber	ExecutiveGeneralandAdmin	InventoryManagement	Manufacturing		QualityAssurance	ResearchandDevelopment		SalesandMarketing
1		Executive			Purchasing		Production		Document Control	Engineering			Marketing
2		Facilities and Maintenance	Shipping and Receiving	Production Control	Quality Assurance	Research and Development	Sales
3		Finance													Tool Design	
4		Human Resources					
5		Information Services					
(end of results)
(5 rows affected)




Below are the queries used step-by-step for this solution.

	Query #1.1: We add column "RowNumber" to assign a unique number to each department name under its respective group name
	-----------
SELECT Department.GroupName								-- RowNumberDeptGroupNameLevel1
, Department.[Name] AS DepartmentName
, ROW_NUMBER() OVER(PARTITION BY Department.GroupName ORDER BY Department.[Name]) AS RowNumber
FROM [AdventureWorks2022].[HumanResources].[Employee] AS Employee
LEFT JOIN [AdventureWorks2022].[HumanResources].[EmployeeDepartmentHistory] AS EmployeeDepartmentHistory
	ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID
LEFT JOIN [AdventureWorks2022].[HumanResources].[Department] AS Department
	ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID	
GROUP BY Department.GroupName, Department.[Name]					-- RowNumberDeptGroupNameLevel1


	-- OUTPUT
GroupName				DepartmentName			RowNmber
Executive General and Administration	Executive			1
Executive General and Administration	Facilities and Maintenance	2
Executive General and Administration	Finance				3
Executive General and Administration	Human Resources			4
Executive General and Administration	Information Services		5
Inventory Management			Purchasing			1
Inventory Management			Shipping and Receiving		2
Manufacturing				Production			1
Manufacturing				Production Control		2
Quality Assurance			Document Control		1
Quality Assurance			Quality Assurance		2
Research and Development		Engineering			1
Research and Development		Research and Development	2
Research and Development		Tool Design			3
Sales and Marketing			Marketing			1
Sales and Marketing			Sales				2
(end of results)
(16 rows affected)




	Query #1.2: We pivot the department names using CASE statements
	-----------
SELECT PivotingDeptNameGroup.RowNumber							-- PivotingDeptNamesNonGroupedLevel2
, CASE WHEN PivotingDeptNameGroup.GroupName = 'Executive General and Administration' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END AS 'ExecutiveGeneralandAdmin'
, CASE WHEN PivotingDeptNameGroup.GroupName = 'Inventory Management' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END AS 'InventoryManagement'
, CASE WHEN PivotingDeptNameGroup.GroupName = 'Manufacturing' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END AS 'Manufacturing'
, CASE WHEN PivotingDeptNameGroup.GroupName = 'Quality Assurance' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END AS 'QualityAssurance'
, CASE WHEN PivotingDeptNameGroup.GroupName = 'Research and Development' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END AS 'ResearchandDevelopment'
, CASE WHEN PivotingDeptNameGroup.GroupName = 'Sales and Marketing' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END AS 'SalesandMarketing'
FROM (
	SELECT Department.GroupName							-- RowNumberDeptGroupNameLevel1
	, Department.[Name] AS DepartmentName
	, ROW_NUMBER() OVER(PARTITION BY Department.GroupName ORDER BY Department.[Name]) AS RowNumber
	FROM [AdventureWorks2022].[HumanResources].[Employee] AS Employee
	LEFT JOIN [AdventureWorks2022].[HumanResources].[EmployeeDepartmentHistory] AS EmployeeDepartmentHistory
		ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID
	LEFT JOIN [AdventureWorks2022].[HumanResources].[Department] AS Department
		ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID	
	GROUP BY Department.GroupName, Department.[Name]				-- RowNumberDeptGroupNameLevel1
) AS PivotingDeptNameGroup								-- PivotingDeptNamesNonGroupedLevel2


	-- OUTPUT
RowNumber	ExecutiveGeneralandAdmin	InventoryManagement	Manufacturing		QualityAssurance	ResearchandDevelopment		SalesandMarketing
1		Executive			NULL			NULL			NULL			NULL				NULL
2		Facilities and Maintenance	NULL			NULL			NULL			NULL				NULL
3		Finance				NULL			NULL			NULL			NULL				NULL
4		Human Resources			NULL			NULL			NULL			NULL				NULL
5		Information Services		NULL			NULL			NULL			NULL				NULL
1		NULL				Purchasing		NULL			NULL			NULL				NULL
2		NULL				Shipping and Receiving	NULL			NULL			NULL				NULL
1		NULL				NULL			Production		NULL			NULL				NULL
2		NULL				NULL			Production Control	NULL			NULL				NULL
1		NULL				NULL			NULL			Document Control	NULL				NULL
2		NULL				NULL			NULL			Quality Assurance	NULL				NULL
1		NULL				NULL			NULL			NULL			Engineering			NULL
2		NULL				NULL			NULL			NULL			Research and Development	NULL
3		NULL				NULL			NULL			NULL			Tool Design			NULL
1		NULL				NULL			NULL			NULL			NULL				Marketing
2		NULL				NULL			NULL			NULL			NULL				Sales
(end of results)
(16 rows affected)




	Query #1.3: We pivot and group the department names under its respective group name using functon MAX and CASE statements
	-----------
SELECT PivotingDeptNameGroup.RowNumber								-- PivotingDeptNamesGroupedLevel3 / PivotingDeptNamesNonGroupedLevel2
, MAX(CASE WHEN PivotingDeptNameGroup.GroupName = 'Executive General and Administration' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END) AS 'ExecutiveGeneralandAdmin'
, MAX(CASE WHEN PivotingDeptNameGroup.GroupName = 'Inventory Management' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END) AS 'InventoryManagement'
, MAX(CASE WHEN PivotingDeptNameGroup.GroupName = 'Manufacturing' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END) AS 'Manufacturing'
, MAX(CASE WHEN PivotingDeptNameGroup.GroupName = 'Quality Assurance' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END) AS 'QualityAssurance'
, MAX(CASE WHEN PivotingDeptNameGroup.GroupName = 'Research and Development' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END) AS 'ResearchandDevelopment'
, MAX(CASE WHEN PivotingDeptNameGroup.GroupName = 'Sales and Marketing' THEN PivotingDeptNameGroup.DepartmentName ELSE NULL END) AS 'SalesandMarketing'
FROM (
	SELECT Department.GroupName								-- RowNumberDeptGroupNameLevel1
	, Department.[Name] AS DepartmentName
	, ROW_NUMBER() OVER(PARTITION BY Department.GroupName ORDER BY Department.[Name]) AS RowNumber
	FROM [AdventureWorks2022].[HumanResources].[Employee] AS Employee
	LEFT JOIN [AdventureWorks2022].[HumanResources].[EmployeeDepartmentHistory] AS EmployeeDepartmentHistory
		ON Employee.BusinessEntityID = EmployeeDepartmentHistory.BusinessEntityID
	LEFT JOIN [AdventureWorks2022].[HumanResources].[Department] AS Department
		ON EmployeeDepartmentHistory.DepartmentID = Department.DepartmentID	
	GROUP BY Department.GroupName, Department.[Name]					-- RowNumberDeptGroupNameLevel1
) AS PivotingDeptNameGroup									-- PivotingDeptNamesLevel2
GROUP BY PivotingDeptNameGroup.RowNumber							-- PivotingDeptNamesGroupedLevel3


	-- OUTPUT
RowNumber	ExecutiveGeneralandAdmin	InventoryManagement	Manufacturing		QualityAssurance	ResearchandDevelopment		SalesandMarketing
1		Executive			Purchasing		Production		Document Control	Engineering			Marketing
2		Facilities and Maintenance	Shipping and Receiving	Production Control	Quality Assurance	Research and Development	Sales
3		Finance				NULL			NULL			NULL			Tool Design			NULL
4		Human Resources			NULL			NULL			NULL			NULL				NULL
5		Information Services		NULL			NULL			NULL			NULL				NULL
(end of results)
(5 rows affected)


We remove the NULL values from each column by adding function COALESCE to each CASE statement.
See Query #1 showing the desired result.
